import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, r as validate_each_argument, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, E as set_data_dev, a as space, c as claim_space, n as noop, K as empty, q as query_selector_all, z as add_render_callback, N as set_input_value, O as select_option, P as select_options, D as run_all, w as listen_dev, Q as prop_dev, R as destroy_each, T as select_value, U as select_multiple_value } from './client.8b99c30e.js';

/* src\routes\payment.svelte generated by Svelte v3.20.1 */

const file = "src\\routes\\payment.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (101:1) {#each filteredPeople as person, i}
function create_each_block_1(ctx) {
	let option;
	let t0_value = /*person*/ ctx[26].last + "";
	let t0;
	let t1;
	let t2_value = /*person*/ ctx[26].first + "";
	let t2;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = text(", ");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true, class: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_text(option_nodes, ", ");
			t2 = claim_text(option_nodes, t2_value);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*i*/ ctx[7];
			option.value = option.__value;
			attr_dev(option, "class", "svelte-yhmcz5");
			add_location(option, file, 101, 2, 1960);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t0);
			append_dev(option, t1);
			append_dev(option, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*filteredPeople*/ 32 && t0_value !== (t0_value = /*person*/ ctx[26].last + "")) set_data_dev(t0, t0_value);
			if (dirty & /*filteredPeople*/ 32 && t2_value !== (t2_value = /*person*/ ctx[26].first + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(101:1) {#each filteredPeople as person, i}",
		ctx
	});

	return block;
}

// (141:1) {#each menu as flavour}
function create_each_block(ctx) {
	let option;
	let t0_value = /*flavour*/ ctx[23] + "";
	let t0;
	let t1;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true, class: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*flavour*/ ctx[23];
			option.value = option.__value;
			attr_dev(option, "class", "svelte-yhmcz5");
			add_location(option, file, 141, 2, 2816);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t0);
			append_dev(option, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(141:1) {#each menu as flavour}",
		ctx
	});

	return block;
}

// (152:0) {:else}
function create_else_block(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3_value = (/*scoops*/ ctx[3] === 1 ? "scoop" : "scoops") + "";
	let t3;
	let t4;
	let t5_value = join(/*flavours*/ ctx[4]) + "";
	let t5;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("You ordered ");
			t1 = text(/*scoops*/ ctx[3]);
			t2 = space();
			t3 = text(t3_value);
			t4 = text("\r\n\t\tof ");
			t5 = text(t5_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "You ordered ");
			t1 = claim_text(p_nodes, /*scoops*/ ctx[3]);
			t2 = claim_space(p_nodes);
			t3 = claim_text(p_nodes, t3_value);
			t4 = claim_text(p_nodes, "\r\n\t\tof ");
			t5 = claim_text(p_nodes, t5_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-yhmcz5");
			add_location(p, file, 152, 1, 3060);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(p, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*scoops*/ 8) set_data_dev(t1, /*scoops*/ ctx[3]);
			if (dirty & /*scoops*/ 8 && t3_value !== (t3_value = (/*scoops*/ ctx[3] === 1 ? "scoop" : "scoops") + "")) set_data_dev(t3, t3_value);
			if (dirty & /*flavours*/ 16 && t5_value !== (t5_value = join(/*flavours*/ ctx[4]) + "")) set_data_dev(t5, t5_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(152:0) {:else}",
		ctx
	});

	return block;
}

// (150:35) 
function create_if_block_1(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Can't order more flavours than scoops!");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Can't order more flavours than scoops!");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-yhmcz5");
			add_location(p, file, 150, 1, 3003);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(150:35) ",
		ctx
	});

	return block;
}

// (148:0) {#if flavours.length === 0}
function create_if_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Please select at least one flavour");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Please select at least one flavour");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-yhmcz5");
			add_location(p, file, 148, 1, 2922);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(148:0) {#if flavours.length === 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let link;
	let t0;
	let input0;
	let t1;
	let select0;
	let select0_size_value;
	let t2;
	let label0;
	let input1;
	let t3;
	let label1;
	let input2;
	let t4;
	let div;
	let button0;
	let t5;
	let button0_disabled_value;
	let t6;
	let button1;
	let t7;
	let button1_disabled_value;
	let t8;
	let button2;
	let t9;
	let button2_disabled_value;
	let t10;
	let br0;
	let br1;
	let t11;
	let hr;
	let t12;
	let h1;
	let t13;
	let t14;
	let label2;
	let input3;
	let input3_value_value;
	let t15;
	let t16;
	let label3;
	let input4;
	let input4_value_value;
	let t17;
	let t18;
	let label4;
	let input5;
	let input5_value_value;
	let t19;
	let t20;
	let h2;
	let t21;
	let t22;
	let select1;
	let t23;
	let if_block_anchor;
	let dispose;
	let each_value_1 = /*filteredPeople*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*menu*/ ctx[11];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function select_block_type(ctx, dirty) {
		if (/*flavours*/ ctx[4].length === 0) return create_if_block;
		if (/*flavours*/ ctx[4].length > /*scoops*/ ctx[3]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			link = element("link");
			t0 = space();
			input0 = element("input");
			t1 = space();
			select0 = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			label0 = element("label");
			input1 = element("input");
			t3 = space();
			label1 = element("label");
			input2 = element("input");
			t4 = space();
			div = element("div");
			button0 = element("button");
			t5 = text("create");
			t6 = space();
			button1 = element("button");
			t7 = text("update");
			t8 = space();
			button2 = element("button");
			t9 = text("delete");
			t10 = space();
			br0 = element("br");
			br1 = element("br");
			t11 = space();
			hr = element("hr");
			t12 = space();
			h1 = element("h1");
			t13 = text("Size");
			t14 = space();
			label2 = element("label");
			input3 = element("input");
			t15 = text("\r\n\tOne scoop");
			t16 = space();
			label3 = element("label");
			input4 = element("input");
			t17 = text("\r\n\tTwo scoops");
			t18 = space();
			label4 = element("label");
			input5 = element("input");
			t19 = text("\r\n\tThree scoops");
			t20 = space();
			h2 = element("h2");
			t21 = text("Flavours");
			t22 = space();
			select1 = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t23 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-7f989n\"]", document.head);
			link = claim_element(head_nodes, "LINK", { rel: true, href: true, class: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			input0 = claim_element(nodes, "INPUT", { placeholder: true, class: true });
			t1 = claim_space(nodes);
			select0 = claim_element(nodes, "SELECT", { size: true, class: true });
			var select0_nodes = children(select0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(select0_nodes);
			}

			select0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			label0 = claim_element(nodes, "LABEL", { class: true });
			var label0_nodes = children(label0);
			input1 = claim_element(label0_nodes, "INPUT", { placeholder: true, class: true });
			label0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			label1 = claim_element(nodes, "LABEL", { class: true });
			var label1_nodes = children(label1);
			input2 = claim_element(label1_nodes, "INPUT", { placeholder: true, class: true });
			label1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button0 = claim_element(div_nodes, "BUTTON", { disabled: true, class: true });
			var button0_nodes = children(button0);
			t5 = claim_text(button0_nodes, "create");
			button0_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", { disabled: true, class: true });
			var button1_nodes = children(button1);
			t7 = claim_text(button1_nodes, "update");
			button1_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			button2 = claim_element(div_nodes, "BUTTON", { disabled: true, class: true });
			var button2_nodes = children(button2);
			t9 = claim_text(button2_nodes, "delete");
			button2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", { class: true });
			br1 = claim_element(nodes, "BR", { class: true });
			t11 = claim_space(nodes);
			hr = claim_element(nodes, "HR", { class: true });
			t12 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t13 = claim_text(h1_nodes, "Size");
			h1_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);
			label2 = claim_element(nodes, "LABEL", { class: true });
			var label2_nodes = children(label2);
			input3 = claim_element(label2_nodes, "INPUT", { type: true, value: true, class: true });
			t15 = claim_text(label2_nodes, "\r\n\tOne scoop");
			label2_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);
			label3 = claim_element(nodes, "LABEL", { class: true });
			var label3_nodes = children(label3);
			input4 = claim_element(label3_nodes, "INPUT", { type: true, value: true, class: true });
			t17 = claim_text(label3_nodes, "\r\n\tTwo scoops");
			label3_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			label4 = claim_element(nodes, "LABEL", { class: true });
			var label4_nodes = children(label4);
			input5 = claim_element(label4_nodes, "INPUT", { type: true, value: true, class: true });
			t19 = claim_text(label4_nodes, "\r\n\tThree scoops");
			label4_nodes.forEach(detach_dev);
			t20 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t21 = claim_text(h2_nodes, "Flavours");
			h2_nodes.forEach(detach_dev);
			t22 = claim_space(nodes);
			select1 = claim_element(nodes, "SELECT", { multiple: true, class: true });
			var select1_nodes = children(select1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select1_nodes);
			}

			select1_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(link, "rel", "stylesheet");
			attr_dev(link, "href", "tutorial/dark-theme.css");
			attr_dev(link, "class", "svelte-yhmcz5");
			add_location(link, file, 1, 0, 15);
			document.title = "Payment";
			attr_dev(input0, "placeholder", "filter prefix");
			attr_dev(input0, "class", "svelte-yhmcz5");
			add_location(input0, file, 97, 0, 1827);
			attr_dev(select0, "size", select0_size_value = 5);
			attr_dev(select0, "class", "svelte-yhmcz5");
			if (/*i*/ ctx[7] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[15].call(select0));
			add_location(select0, file, 99, 0, 1886);
			attr_dev(input1, "placeholder", "first");
			attr_dev(input1, "class", "svelte-yhmcz5");
			add_location(input1, file, 105, 7, 2048);
			attr_dev(label0, "class", "svelte-yhmcz5");
			add_location(label0, file, 105, 0, 2041);
			attr_dev(input2, "placeholder", "last");
			attr_dev(input2, "class", "svelte-yhmcz5");
			add_location(input2, file, 106, 7, 2111);
			attr_dev(label1, "class", "svelte-yhmcz5");
			add_location(label1, file, 106, 0, 2104);
			button0.disabled = button0_disabled_value = !/*first*/ ctx[1] || !/*last*/ ctx[2];
			attr_dev(button0, "class", "svelte-yhmcz5");
			add_location(button0, file, 109, 1, 2191);
			button1.disabled = button1_disabled_value = !/*first*/ ctx[1] || !/*last*/ ctx[2] || !/*selected*/ ctx[6];
			attr_dev(button1, "class", "svelte-yhmcz5");
			add_location(button1, file, 110, 1, 2264);
			button2.disabled = button2_disabled_value = !/*selected*/ ctx[6];
			attr_dev(button2, "class", "svelte-yhmcz5");
			add_location(button2, file, 111, 1, 2350);
			attr_dev(div, "class", "buttons svelte-yhmcz5");
			add_location(div, file, 108, 0, 2167);
			attr_dev(br0, "class", "svelte-yhmcz5");
			add_location(br0, file, 115, 0, 2428);
			attr_dev(br1, "class", "svelte-yhmcz5");
			add_location(br1, file, 115, 5, 2433);
			attr_dev(hr, "class", "svelte-yhmcz5");
			add_location(hr, file, 116, 0, 2440);
			attr_dev(h1, "class", "svelte-yhmcz5");
			add_location(h1, file, 119, 0, 2451);
			attr_dev(input3, "type", "radio");
			input3.__value = input3_value_value = 1;
			input3.value = input3.__value;
			attr_dev(input3, "class", "svelte-yhmcz5");
			/*$$binding_groups*/ ctx[19][0].push(input3);
			add_location(input3, file, 122, 1, 2478);
			attr_dev(label2, "class", "svelte-yhmcz5");
			add_location(label2, file, 121, 0, 2468);
			attr_dev(input4, "type", "radio");
			input4.__value = input4_value_value = 2;
			input4.value = input4.__value;
			attr_dev(input4, "class", "svelte-yhmcz5");
			/*$$binding_groups*/ ctx[19][0].push(input4);
			add_location(input4, file, 127, 1, 2562);
			attr_dev(label3, "class", "svelte-yhmcz5");
			add_location(label3, file, 126, 0, 2552);
			attr_dev(input5, "type", "radio");
			input5.__value = input5_value_value = 3;
			input5.value = input5.__value;
			attr_dev(input5, "class", "svelte-yhmcz5");
			/*$$binding_groups*/ ctx[19][0].push(input5);
			add_location(input5, file, 132, 1, 2647);
			attr_dev(label4, "class", "svelte-yhmcz5");
			add_location(label4, file, 131, 0, 2637);
			attr_dev(h2, "class", "svelte-yhmcz5");
			add_location(h2, file, 137, 0, 2726);
			select1.multiple = true;
			attr_dev(select1, "class", "svelte-yhmcz5");
			if (/*flavours*/ ctx[4] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[22].call(select1));
			add_location(select1, file, 139, 0, 2747);
		},
		m: function mount(target, anchor, remount) {
			append_dev(document.head, link);
			insert_dev(target, t0, anchor);
			insert_dev(target, input0, anchor);
			set_input_value(input0, /*prefix*/ ctx[0]);
			insert_dev(target, t1, anchor);
			insert_dev(target, select0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select0, null);
			}

			select_option(select0, /*i*/ ctx[7]);
			insert_dev(target, t2, anchor);
			insert_dev(target, label0, anchor);
			append_dev(label0, input1);
			set_input_value(input1, /*first*/ ctx[1]);
			insert_dev(target, t3, anchor);
			insert_dev(target, label1, anchor);
			append_dev(label1, input2);
			set_input_value(input2, /*last*/ ctx[2]);
			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, button0);
			append_dev(button0, t5);
			append_dev(div, t6);
			append_dev(div, button1);
			append_dev(button1, t7);
			append_dev(div, t8);
			append_dev(div, button2);
			append_dev(button2, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t11, anchor);
			insert_dev(target, hr, anchor);
			insert_dev(target, t12, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t13);
			insert_dev(target, t14, anchor);
			insert_dev(target, label2, anchor);
			append_dev(label2, input3);
			input3.checked = input3.__value === /*scoops*/ ctx[3];
			append_dev(label2, t15);
			insert_dev(target, t16, anchor);
			insert_dev(target, label3, anchor);
			append_dev(label3, input4);
			input4.checked = input4.__value === /*scoops*/ ctx[3];
			append_dev(label3, t17);
			insert_dev(target, t18, anchor);
			insert_dev(target, label4, anchor);
			append_dev(label4, input5);
			input5.checked = input5.__value === /*scoops*/ ctx[3];
			append_dev(label4, t19);
			insert_dev(target, t20, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t21);
			insert_dev(target, t22, anchor);
			insert_dev(target, select1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select1, null);
			}

			select_options(select1, /*flavours*/ ctx[4]);
			insert_dev(target, t23, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(input0, "input", /*input0_input_handler*/ ctx[14]),
				listen_dev(select0, "change", /*select0_change_handler*/ ctx[15]),
				listen_dev(input1, "input", /*input1_input_handler*/ ctx[16]),
				listen_dev(input2, "input", /*input2_input_handler*/ ctx[17]),
				listen_dev(button0, "click", /*create*/ ctx[8], false, false, false),
				listen_dev(button1, "click", /*update*/ ctx[9], false, false, false),
				listen_dev(button2, "click", /*remove*/ ctx[10], false, false, false),
				listen_dev(input3, "change", /*input3_change_handler*/ ctx[18]),
				listen_dev(input4, "change", /*input4_change_handler*/ ctx[20]),
				listen_dev(input5, "change", /*input5_change_handler*/ ctx[21]),
				listen_dev(select1, "change", /*select1_change_handler*/ ctx[22])
			];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*prefix*/ 1 && input0.value !== /*prefix*/ ctx[0]) {
				set_input_value(input0, /*prefix*/ ctx[0]);
			}

			if (dirty & /*filteredPeople*/ 32) {
				each_value_1 = /*filteredPeople*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*i*/ 128) {
				select_option(select0, /*i*/ ctx[7]);
			}

			if (dirty & /*first*/ 2 && input1.value !== /*first*/ ctx[1]) {
				set_input_value(input1, /*first*/ ctx[1]);
			}

			if (dirty & /*last*/ 4 && input2.value !== /*last*/ ctx[2]) {
				set_input_value(input2, /*last*/ ctx[2]);
			}

			if (dirty & /*first, last*/ 6 && button0_disabled_value !== (button0_disabled_value = !/*first*/ ctx[1] || !/*last*/ ctx[2])) {
				prop_dev(button0, "disabled", button0_disabled_value);
			}

			if (dirty & /*first, last, selected*/ 70 && button1_disabled_value !== (button1_disabled_value = !/*first*/ ctx[1] || !/*last*/ ctx[2] || !/*selected*/ ctx[6])) {
				prop_dev(button1, "disabled", button1_disabled_value);
			}

			if (dirty & /*selected*/ 64 && button2_disabled_value !== (button2_disabled_value = !/*selected*/ ctx[6])) {
				prop_dev(button2, "disabled", button2_disabled_value);
			}

			if (dirty & /*scoops*/ 8) {
				input3.checked = input3.__value === /*scoops*/ ctx[3];
			}

			if (dirty & /*scoops*/ 8) {
				input4.checked = input4.__value === /*scoops*/ ctx[3];
			}

			if (dirty & /*scoops*/ 8) {
				input5.checked = input5.__value === /*scoops*/ ctx[3];
			}

			if (dirty & /*menu*/ 2048) {
				each_value = /*menu*/ ctx[11];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*flavours*/ 16) {
				select_options(select1, /*flavours*/ ctx[4]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(link);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(input0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(select0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(label0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(label1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(hr);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(label2);
			/*$$binding_groups*/ ctx[19][0].splice(/*$$binding_groups*/ ctx[19][0].indexOf(input3), 1);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(label3);
			/*$$binding_groups*/ ctx[19][0].splice(/*$$binding_groups*/ ctx[19][0].indexOf(input4), 1);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(label4);
			/*$$binding_groups*/ ctx[19][0].splice(/*$$binding_groups*/ ctx[19][0].indexOf(input5), 1);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(select1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t23);
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function join(flavours) {
	if (flavours.length === 1) return flavours[0];
	return `${flavours.slice(0, -1).join(", ")} and ${flavours[flavours.length - 1]}`;
}

function instance($$self, $$props, $$invalidate) {
	let people = [
		{ first: "Hans", last: "Emil" },
		{ first: "Max", last: "Mustermann" },
		{ first: "Roman", last: "Tisch" }
	];

	let prefix = "";
	let first = "";
	let last = "";
	let i = 0;

	function create() {
		$$invalidate(12, people = people.concat({ first, last }));
		$$invalidate(7, i = people.length - 1);
		$$invalidate(1, first = $$invalidate(2, last = ""));
	}

	function update() {
		$$invalidate(6, selected.first = first, selected);
		$$invalidate(6, selected.last = last, selected);
		$$invalidate(12, people);
	}

	function remove() {
		// Remove selected person from the source array (people), not the filtered array
		const index = people.indexOf(selected);

		$$invalidate(12, people = [...people.slice(0, index), ...people.slice(index + 1)]);
		$$invalidate(1, first = $$invalidate(2, last = ""));
		$$invalidate(7, i = Math.min(i, filteredPeople.length - 2));
	}

	function reset_inputs(person) {
		$$invalidate(1, first = person ? person.first : "");
		$$invalidate(2, last = person ? person.last : "");
	}

	//script kedua
	let scoops = 1;

	let flavours = ["Mint choc chip"];
	let menu = ["Cookies and cream", "Mint choc chip", "Raspberry ripple"];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Payment> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Payment", $$slots, []);
	const $$binding_groups = [[]];

	function input0_input_handler() {
		prefix = this.value;
		$$invalidate(0, prefix);
	}

	function select0_change_handler() {
		i = select_value(this);
		$$invalidate(7, i);
	}

	function input1_input_handler() {
		first = this.value;
		$$invalidate(1, first);
	}

	function input2_input_handler() {
		last = this.value;
		$$invalidate(2, last);
	}

	function input3_change_handler() {
		scoops = this.__value;
		$$invalidate(3, scoops);
	}

	function input4_change_handler() {
		scoops = this.__value;
		$$invalidate(3, scoops);
	}

	function input5_change_handler() {
		scoops = this.__value;
		$$invalidate(3, scoops);
	}

	function select1_change_handler() {
		flavours = select_multiple_value(this);
		$$invalidate(4, flavours);
		$$invalidate(11, menu);
	}

	$$self.$capture_state = () => ({
		people,
		prefix,
		first,
		last,
		i,
		create,
		update,
		remove,
		reset_inputs,
		scoops,
		flavours,
		menu,
		join,
		filteredPeople,
		selected
	});

	$$self.$inject_state = $$props => {
		if ("people" in $$props) $$invalidate(12, people = $$props.people);
		if ("prefix" in $$props) $$invalidate(0, prefix = $$props.prefix);
		if ("first" in $$props) $$invalidate(1, first = $$props.first);
		if ("last" in $$props) $$invalidate(2, last = $$props.last);
		if ("i" in $$props) $$invalidate(7, i = $$props.i);
		if ("scoops" in $$props) $$invalidate(3, scoops = $$props.scoops);
		if ("flavours" in $$props) $$invalidate(4, flavours = $$props.flavours);
		if ("menu" in $$props) $$invalidate(11, menu = $$props.menu);
		if ("filteredPeople" in $$props) $$invalidate(5, filteredPeople = $$props.filteredPeople);
		if ("selected" in $$props) $$invalidate(6, selected = $$props.selected);
	};

	let filteredPeople;
	let selected;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*prefix, people*/ 4097) {
			 $$invalidate(5, filteredPeople = prefix
			? people.filter(person => {
					const name = `${person.last}, ${person.first}`;
					return name.toLowerCase().startsWith(prefix.toLowerCase());
				})
			: people);
		}

		if ($$self.$$.dirty & /*filteredPeople, i*/ 160) {
			 $$invalidate(6, selected = filteredPeople[i]);
		}

		if ($$self.$$.dirty & /*selected*/ 64) {
			 reset_inputs(selected);
		}
	};

	return [
		prefix,
		first,
		last,
		scoops,
		flavours,
		filteredPeople,
		selected,
		i,
		create,
		update,
		remove,
		menu,
		people,
		reset_inputs,
		input0_input_handler,
		select0_change_handler,
		input1_input_handler,
		input2_input_handler,
		input3_change_handler,
		$$binding_groups,
		input4_change_handler,
		input5_change_handler,
		select1_change_handler
	];
}

class Payment extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Payment",
			options,
			id: create_fragment.name
		});
	}
}

export default Payment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
