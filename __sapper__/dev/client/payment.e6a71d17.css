.svelte-yhmcz5{font-family:inherit;font-size:inherit}input.svelte-yhmcz5{display:block;margin:0 0 0.5em 0}select.svelte-yhmcz5{float:left;margin:0 1em 1em 0;width:14em}.buttons.svelte-yhmcz5{clear:both}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"file":"payment.e6a71d17.css","sources":["../../../payment.svelte"],"sourcesContent":["<svelte:head>\r\n\t<meta charset=\"utf-8\" />\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n  <meta name=\"description\" content=\"Sleek Dashboard - Free Bootstrap 4 Admin Dashboard Template and UI Kit. It is very powerful bootstrap admin dashboard, which allows you to build products like admin panels, content management systems and CRMs etc.\">\r\n\r\n\r\n  <title>STIKOM</title>\r\n\r\n<link rel=\"stylesheet\" href=\"tutorial/dark-theme.css\">\r\n\r\n  <!-- GOOGLE FONTS -->\r\n  <link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,500|Poppins:400,500,600,700|Roboto:400,500\" rel=\"stylesheet\" />\r\n  <link href=\"https://cdn.materialdesignicons.com/4.4.95/css/materialdesignicons.min.css\" rel=\"stylesheet\" />\r\n\r\n\r\n  <!-- PLUGINS CSS STYLE -->\r\n  <link href=\"assets/plugins/nprogress/nprogress.css\" rel=\"stylesheet\" />\r\n\r\n  \r\n  \r\n  <link href=\"assets/plugins/daterangepicker/daterangepicker.css\" rel=\"stylesheet\" />\r\n  \r\n  \r\n  \r\n  <link href=\"assets/plugins/data-tables/datatables.bootstrap4.min.css\" rel=\"stylesheet\" />\r\n  \r\n  \r\n  \r\n  <link href=\"assets/plugins/data-tables/responsive.datatables.min.css\" rel=\"stylesheet\" />\r\n  \r\n  \r\n\r\n  <!-- SLEEK CSS -->\r\n  <link id=\"sleek-css\" rel=\"stylesheet\" href=\"assets/css/sleek.css\" />\r\n\r\n  <!-- FAVICON -->\r\n  <link href=\"assets/img/favicon.png\" rel=\"shortcut icon\" />\r\n\r\n  <script src=\"assets/plugins/nprogress/nprogress.js\"></script>\r\n</svelte:head>\r\n\r\n\r\n<script>\r\n\tlet people = [\r\n\t\t{ first: 'Hans', last: 'Emil' },\r\n\t\t{ first: 'Max', last: 'Mustermann' },\r\n\t\t{ first: 'Roman', last: 'Tisch' }\r\n\t];\r\n\r\n\tlet prefix = '';\r\n\tlet first = '';\r\n\tlet last = '';\r\n\tlet i = 0;\r\n\r\n\t$: filteredPeople = prefix\r\n\t\t? people.filter(person => {\r\n\t\t\tconst name = `${person.last}, ${person.first}`;\r\n\t\t\treturn name.toLowerCase().startsWith(prefix.toLowerCase());\r\n\t\t})\r\n\t\t: people;\r\n\r\n\t$: selected = filteredPeople[i];\r\n\r\n\t$: reset_inputs(selected);\r\n\r\n\tfunction create() {\r\n\t\tpeople = people.concat({ first, last });\r\n\t\ti = people.length - 1;\r\n\t\tfirst = last = '';\r\n\t}\r\n\r\n\tfunction update() {\r\n\t\tselected.first = first;\r\n\t\tselected.last = last;\r\n\t\tpeople = people;\r\n\t}\r\n\r\n\tfunction remove() {\r\n\t\t// Remove selected person from the source array (people), not the filtered array\r\n\t\tconst index = people.indexOf(selected);\r\n\t\tpeople = [...people.slice(0, index), ...people.slice(index + 1)];\r\n\r\n\t\tfirst = last = '';\r\n\t\ti = Math.min(i, filteredPeople.length - 2);\r\n\t}\r\n\r\n\tfunction reset_inputs(person) {\r\n\t\tfirst = person ? person.first : '';\r\n\t\tlast = person ? person.last : '';\r\n\t}\r\n\r\n\r\n\t//script kedua\r\n\tlet scoops = 1;\r\n\tlet flavours = ['Mint choc chip'];\r\n\r\n\tlet menu = [\r\n\t\t'Cookies and cream',\r\n\t\t'Mint choc chip',\r\n\t\t'Raspberry ripple'\r\n\t];\r\n\r\n\tfunction join(flavours) {\r\n\t\tif (flavours.length === 1) return flavours[0];\r\n\t\treturn `${flavours.slice(0, -1).join(', ')} and ${flavours[flavours.length - 1]}`;\r\n\t}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style>\r\n\t* {\r\n\t\tfont-family: inherit;\r\n\t\tfont-size: inherit;\r\n\t}\r\n\r\n\tinput {\r\n\t\tdisplay: block;\r\n\t\tmargin: 0 0 0.5em 0;\r\n\t}\r\n\r\n\tselect {\r\n\t\tfloat: left;\r\n\t\tmargin: 0 1em 1em 0;\r\n\t\twidth: 14em;\r\n\t}\r\n\r\n\t.buttons {\r\n\t\tclear: both;\r\n\t}\r\n</style>\r\n\r\n\r\n<body id=\"body\" class=\"header-fixed sidebar-fixed sidebar-dark header-light\">\r\n  \r\n  <script>\r\n    NProgress.configure({ showSpinner: false });\r\n    NProgress.start();\r\n  </script>\r\n\r\n  \r\n\r\n  <div class=\"wrapper\">\r\n   \r\n\r\n\r\n        <aside class=\"left-sidebar bg-sidebar\">\r\n          <div id=\"sidebar\" class=\"sidebar sidebar-with-footer\">\r\n            <!-- Aplication Brand -->\r\n            <div class=\"app-brand\">\r\n              <a href=\"/index.html\" title=\"Sleek Dashboard\">\r\n                <svg\r\n                  class=\"brand-icon\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  preserveAspectRatio=\"xMidYMid\"\r\n                  width=\"30\"\r\n                  height=\"33\"\r\n                  viewBox=\"0 0 30 33\"\r\n                >\r\n                  <g fill=\"none\" fill-rule=\"evenodd\">\r\n                    <path\r\n                      class=\"logo-fill-blue\"\r\n                      fill=\"#7DBCFF\"\r\n                      d=\"M0 4v25l8 4V0zM22 4v25l8 4V0z\"\r\n                    />\r\n                    <path class=\"logo-fill-white\" fill=\"#FFF\" d=\"M11 4v25l8 4V0z\" />\r\n                  </g>\r\n                </svg>\r\n                <span class=\"brand-name text-truncate\">Sleek Dashboard</span>\r\n              </a>\r\n            </div>\r\n            <!-- begin sidebar scrollbar -->\r\n            <div class=\"sidebar-scrollbar\">\r\n\r\n              <!-- sidebar menu -->\r\n              <ul class=\"nav sidebar-inner\" id=\"sidebar-menu\">\r\n                \r\n\r\n                \r\n                  <li  class=\"has-sub\" >\r\n                    <a class=\"sidenav-item-link\" href=\"javascript:void(0)\" data-toggle=\"collapse\" data-target=\"#dashboard\"\r\n                      aria-expanded=\"false\" aria-controls=\"dashboard\">\r\n                      <i class=\"mdi mdi-view-dashboard-outline\"></i>\r\n                      <span class=\"nav-text\">Mahasiswa</span> <b class=\"caret\"></b>\r\n                    </a>\r\n                    <ul  class=\"collapse\"  id=\"dashboard\"\r\n                      data-parent=\"#sidebar-menu\">\r\n                      <div class=\"sub-menu\">\r\n                        \r\n                        \r\n                          \r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\".\">\r\n                                <span class=\"nav-text\">Data Mahasiswa</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n            \r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"payment\">\r\n                                <span class=\"nav-text\">Input Data</span>\r\n                                \r\n                                <!-- <span class=\"badge badge-success\">new</span> -->\r\n                                \r\n                              </a>\r\n                            </li>\r\n         \r\n                      </div>\r\n                    </ul>\r\n                  </li>    <li  class=\"has-sub\" >\r\n                    <a class=\"sidenav-item-link\" href=\"javascript:void(0)\" data-toggle=\"collapse\" data-target=\"#app\"\r\n                      aria-expanded=\"false\" aria-controls=\"app\">\r\n                      <i class=\"mdi mdi-pencil-box-multiple\"></i>\r\n                      <span class=\"nav-text\">MATA KULIAH</span> <b class=\"caret\"></b>\r\n                    </a>\r\n                    <ul  class=\"collapse\"  id=\"app\"\r\n                      data-parent=\"#sidebar-menu\">\r\n                      <div class=\"sub-menu\">\r\n                        \r\n                        \r\n                          \r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Daftar Matkul</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Input Matkul</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                      </div>\r\n                    </ul>\r\n                  </li>    \r\n\r\n\r\n                 <li  class=\"has-sub\" >\r\n                    <a class=\"sidenav-item-link\" href=\"javascript:void(0)\" data-toggle=\"collapse\" data-target=\"#charts\"\r\n                      aria-expanded=\"false\" aria-controls=\"charts\">\r\n                      <i class=\"mdi mdi-account-card-details\"></i>\r\n                      <span class=\"nav-text\">DOSEN</span> <b class=\"caret\"></b>\r\n                    </a>\r\n                    <ul  class=\"collapse\"  id=\"charts\"\r\n                      data-parent=\"#sidebar-menu\">\r\n                      <div class=\"sub-menu\">\r\n                        \r\n                        \r\n                          \r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Daftar Dosen</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Input Data Dosen</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                      </div>\r\n                    </ul>\r\n                  </li>\r\n\r\n\r\n\t\t\t\t   <li  class=\"has-sub\" >\r\n                    <a class=\"sidenav-item-link\" href=\"javascript:void(0)\" data-toggle=\"collapse\" data-target=\"#components\"\r\n                      aria-expanded=\"false\" aria-controls=\"components\">\r\n                      <i class=\"mdi mdi-database-edit\"></i>\r\n                      <span class=\"nav-text\">KEUANGAN</span> <b class=\"caret\"></b>\r\n                    </a>\r\n                    <ul  class=\"collapse\"  id=\"components\"\r\n                      data-parent=\"#sidebar-menu\">\r\n                      <div class=\"sub-menu\">\r\n                        \r\n                        \r\n                          \r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Data Keuangan</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                            <li >\r\n                              <a class=\"sidenav-item-link\" href=\"about\">\r\n                                <span class=\"nav-text\">Input Data</span>\r\n                                \r\n                              </a>\r\n                            </li>\r\n                      </div>\r\n                    </ul>\r\n                  </li> \r\n\r\n        </aside>\r\n\r\n\r\n    <div class=\"page-wrapper\">\r\n                <!-- Header -->\r\n          <header class=\"main-header \" id=\"header\">\r\n            <nav class=\"navbar navbar-static-top navbar-expand-lg\">\r\n              <!-- Sidebar toggle button -->\r\n              <button id=\"sidebar-toggler\" class=\"sidebar-toggle\">\r\n                <span class=\"sr-only\">Toggle navigation</span>\r\n              </button>\r\n              <!-- search form -->\r\n              <div class=\"search-form d-none d-lg-inline-block\">\r\n                <div class=\"input-group\">\r\n                  <button type=\"button\" name=\"search\" id=\"search-btn\" class=\"btn btn-flat\">\r\n                    <i class=\"mdi mdi-magnify\"></i>\r\n                  </button>\r\n                  <input type=\"text\" name=\"query\" id=\"search-input\" class=\"form-control\" placeholder=\"search...\"\r\n                    autocomplete=\"off\" />\r\n                </div>\r\n                <div id=\"search-results-container\">\r\n                  <ul id=\"search-results\"></ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"navbar-right \">\r\n                <ul class=\"nav navbar-nav\">\r\n                  <li class=\"right-sidebar-in right-sidebar-2-menu\">\r\n                    <i class=\"mdi mdi-settings mdi-spin\"></i>\r\n                  </li>\r\n\r\n\r\n                  <!-- User Account -->\r\n\r\n                  <li class=\"dropdown user-menu\">\r\n                    <button href=\".\" class=\"dropdown-toggle nav-link\" data-toggle=\"dropdown\">\r\n                      <img src=\"assets/img/user/user.png\" class=\"user-image\" alt=\"User Image\" />\r\n                      <span class=\"d-none d-lg-inline-block\">STIKOM Admin 1</span>\r\n                    </button>\r\n                    <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                      <!-- User image -->\r\n                      <li>\r\n                        <a href=\"user-profile.html\">\r\n                          <i class=\"mdi mdi-account\"></i> My Profile\r\n                        </a>\r\n                      </li>\r\n                      <li class=\"right-sidebar-in\">\r\n                        <a href=\"javascript:0\"> <i class=\"mdi mdi-settings\"></i> Setting </a>\r\n                      </li>\r\n\r\n                      <li class=\"dropdown-footer\">\r\n                        <a href=\"index.html\"> <i class=\"mdi mdi-logout\"></i> Log Out </a>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </nav>\r\n\r\n\r\n          </header>\r\n\r\n\r\n      <div class=\"content-wrapper\">\r\n        <div class=\"content\">\t\t\t\t\t\t\r\n        \t<div class=\"breadcrumb-wrapper\">\r\n\t\t\t\t\t\t\t\t<h1>Mahasiswa STIKOM Banyuwangi</h1>\r\n\r\n                <nav aria-label=\"breadcrumb\">\r\n                  <ol class=\"breadcrumb p-0\">\r\n                    <li class=\"breadcrumb-item\">\r\n                      <a href=\".\">\r\n                        <span class=\"mdi mdi-home\"></span>                \r\n                      </a>\r\n                    </li>\r\n                    <li class=\"breadcrumb-item\">\r\n                      MAHASISWA\r\n                    </li>\r\n                    <li class=\"breadcrumb-item\" aria-current=\"page\">Input Data</li>\r\n                  </ol>\r\n                </nav>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t\t<div class=\"col-12\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"card card-default\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h2>Input Data Mahasiswa</h2>\r\n\r\n<input placeholder=\"filter prefix\" bind:value={prefix}>\r\n<select bind:value={i} size={5}>\r\n\t{#each filteredPeople as person, i}\r\n\t\t<option value={i}>{person.last}, {person.first}</option>\r\n\t{/each}\r\n</select>\r\n\r\n<label><input bind:value={first} placeholder=\"first\"></label>\r\n<label><input bind:value={last} placeholder=\"last\"></label>\r\n\r\n<div class='buttons'>\r\n\t<button on:click={create} disabled=\"{!first || !last}\">create</button>\r\n\t<button on:click={update} disabled=\"{!first || !last || !selected}\">update</button>\r\n\t<button on:click={remove} disabled=\"{!selected}\">delete</button>\r\n</div>\r\n\r\n\r\n<br/><br/>\r\n<hr/>\r\n\r\n\r\n<h1>Size</h1>\r\n\r\n<label>\r\n\t<input type=radio bind:group={scoops} value={1}>\r\n\tOne scoop\r\n</label>\r\n\r\n<label>\r\n\t<input type=radio bind:group={scoops} value={2}>\r\n\tTwo scoops\r\n</label>\r\n\r\n<label>\r\n\t<input type=radio bind:group={scoops} value={3}>\r\n\tThree scoops\r\n</label>\r\n\r\n\r\n<h2>Flavours</h2>\r\n\r\n<select multiple bind:value={flavours}>\r\n\t{#each menu as flavour}\r\n\t\t<option value={flavour}>\r\n\t\t\t{flavour}\r\n\t\t</option>\r\n\t{/each}\r\n</select>\r\n\r\n{#if flavours.length === 0}\r\n\t<p>Please select at least one flavour</p>\r\n{:else if flavours.length > scoops}\r\n\t<p>Can't order more flavours than scoops!</p>\r\n{:else}\r\n\t<p>\r\n\t\tYou ordered {scoops} {scoops === 1 ? 'scoop' : 'scoops'}\r\n\t\tof {join(flavours)}\r\n\t</p>\r\n{/if}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n        \r\n\r\n\r\n<!-- Side bar -->\r\n        <div class=\"right-sidebar-2\">\r\n    <div class=\"right-sidebar-container-2\">\r\n      <div class=\"slim-scroll-right-sidebar-2\">\r\n\r\n      <div class=\"right-sidebar-2-header\">\r\n        <h2>Layout Settings</h2>\r\n        <p>User Interface Settings</p>\r\n        <div class=\"btn-close-right-sidebar-2\">\r\n          <i class=\"mdi mdi-window-close\"></i>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"right-sidebar-2-body\">\r\n        <span class=\"right-sidebar-2-subtitle\">Header Layout</span>\r\n        <div class=\"no-col-space\">\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 header-fixed-to btn-right-sidebar-2-active\">Fixed</a>\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 header-static-to\">Static</a>\r\n        </div>\r\n\r\n        <span class=\"right-sidebar-2-subtitle\">Sidebar Layout</span>\r\n        <div class=\"no-col-space\">\r\n          <select class=\"right-sidebar-2-select\" id=\"sidebar-option-select\">\r\n            <option value=\"sidebar-fixed\">Fixed Default</option>\r\n            <option value=\"sidebar-fixed-minified\">Fixed Minified</option>\r\n            <option value=\"sidebar-fixed-offcanvas\">Fixed Offcanvas</option>\r\n            <option value=\"sidebar-static\">Static Default</option>\r\n            <option value=\"sidebar-static-minified\">Static Minified</option>\r\n            <option value=\"sidebar-static-offcanvas\">Static Offcanvas</option>\r\n          </select>\r\n        </div>\r\n\r\n        <span class=\"right-sidebar-2-subtitle\">Header Background</span>\r\n        <div class=\"no-col-space\">\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 btn-right-sidebar-2-active header-light-to\">Light</a>\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 header-dark-to\">Dark</a>\r\n        </div>\r\n\r\n        <span class=\"right-sidebar-2-subtitle\">Navigation Background</span>\r\n        <div class=\"no-col-space\">\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 btn-right-sidebar-2-active sidebar-dark-to\">Dark</a>\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 sidebar-light-to\">Light</a>\r\n        </div>\r\n\r\n        <span class=\"right-sidebar-2-subtitle\">Direction</span>\r\n        <div class=\"no-col-space\">\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 btn-right-sidebar-2-active ltr-to\">LTR</a>\r\n          <a href=\"javascript:void(0);\" class=\"btn-right-sidebar-2 rtl-to\">RTL</a>\r\n        </div>\r\n\r\n        <div class=\"d-flex justify-content-center\" style=\"padding-top: 30px\">\r\n          <div id=\"reset-options\" style=\"width: auto; cursor: pointer\" class=\"btn-right-sidebar-2 btn-reset\">Reset\r\n            Settings</div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n      </div>\r\n\r\n                <footer class=\"footer mt-auto\">\r\n            <div class=\"copyright bg-white\">\r\n              <p>\r\n                &copy; <span id=\"copy-year\">2019</span> Copyright Sleek Dashboard Bootstrap Template by\r\n                <a\r\n                  class=\"text-primary\"\r\n                  href=\"http://www.iamabdus.com/\"\r\n                  target=\"_blank\"\r\n                  >Abdus</a\r\n                >.\r\n              </p>\r\n            </div>\r\n            <script>\r\n                var d = new Date();\r\n                var year = d.getFullYear();\r\n                document.getElementById(\"copy-year\").innerHTML = year;\r\n            </script>\r\n          </footer>\r\n\r\n    </div>\r\n  </div>\r\n\r\n  <script src=\"assets/plugins/jquery/jquery.min.js\"></script>\r\n<script src=\"assets/plugins/slimscrollbar/jquery.slimscroll.min.js\"></script>\r\n<script src=\"assets/plugins/jekyll-search.min.js\"></script>\r\n\r\n\r\n\r\n<script src=\"assets/plugins/daterangepicker/moment.min.js\"></script>\r\n<script src=\"assets/plugins/daterangepicker/daterangepicker.js\"></script>\r\n<script>\r\n  jQuery(document).ready(function() {\r\n    jQuery('input[name=\"dateRange\"]').daterangepicker({\r\n    autoUpdateInput: false,\r\n    singleDatePicker: true,\r\n    locale: {\r\n      cancelLabel: 'Clear'\r\n    }\r\n  });\r\n    jQuery('input[name=\"dateRange\"]').on('apply.daterangepicker', function (ev, picker) {\r\n      jQuery(this).val(picker.startDate.format('MM/DD/YYYY'));\r\n    });\r\n    jQuery('input[name=\"dateRange\"]').on('cancel.daterangepicker', function (ev, picker) {\r\n      jQuery(this).val('');\r\n    });\r\n  });\r\n</script>\r\n<script src=\"assets/js/sleek.bundle.js\"></script>\r\n\r\n</body>"],"names":[],"mappings":"AAmHC,cAAE,CAAC,AACF,WAAW,CAAE,OAAO,CACpB,SAAS,CAAE,OAAO,AACnB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,MAAM,cAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CACnB,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,KAAK,CAAE,IAAI,AACZ,CAAC"} */